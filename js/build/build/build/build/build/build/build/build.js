const{minify:e}=require("terser"),o=require("fs/promises"),s=require("path"),i=require("glob-promise"),r=s.join(__dirname,"../.."),n=s.join(r,"source/js"),a=s.join(r,"source/js/build"),c=[s.join(n,"libs/**"),s.join(a,"**"),s.join(n,"build.js")],t={compress:{dead_code:!0,drop_console:!1,drop_debugger:!0,keep_classnames:!0,keep_fnames:!0},mangle:{keep_classnames:!0,keep_fnames:!0},format:{comments:!1},module:!0,sourceMap:{filename:"source-map",url:"source-map.map"}};async function ensureDirectoryExists(e){try{await o.mkdir(e,{recursive:!0})}catch(o){if("EEXIST"!==o.code)throw new Error(`Failed to create directory ${e}: ${o.message}`)}}async function copyFile(e,i){try{const r=s.dirname(i);await ensureDirectoryExists(r),await o.copyFile(e,i),console.log(`✓ Copied ${e} -> ${i}`)}catch(o){throw console.error(`× Error copying ${e}:`,o),o}}async function processFile(i){try{const r=await o.readFile(i,"utf8"),c=s.relative(n,i),l=s.join(a,c),p=s.dirname(l),u={...t,sourceMap:{...t.sourceMap,filename:s.basename(i),url:`${s.basename(i)}.map`}},d=await e(r,u);await ensureDirectoryExists(p),await o.writeFile(l,d.code),d.map&&await o.writeFile(`${l}.map`,d.map),console.log(`✓ Minified ${i} -> ${l}`)}catch(e){throw console.error(`× Error processing ${i}:`,e),e}}(async function minifyJS(){try{await ensureDirectoryExists(a),console.log("Searching for JS files in:",n),console.log("Ignore patterns:",c);const e=await i(s.join(n,"libs/**/*.js"),{windowsPathsNoEscape:!0}),o=await i(s.join(n,"**/*.js"),{ignore:c,windowsPathsNoEscape:!0});if(console.log("Found files:",o),console.log("Found lib files:",e),0===o.length&&0===e.length)return void console.log("No JavaScript files found to process");console.log(`Found ${o.length} files to minify and ${e.length} lib files to copy...`);for(const o of e){const e=s.relative(n,o),i=s.join(a,e);await copyFile(o,i)}const r=4,t=[];for(let e=0;e<o.length;e+=r)t.push(o.slice(e,e+r));for(const e of t)await Promise.all(e.map(processFile));console.log("\n✓ All files processed successfully!")}catch(e){console.error("× Build failed:",e),process.exit(1)}})().catch(e=>{console.error("× Unhandled error:",e),process.exit(1)});
//# sourceMappingURL=build.js.map